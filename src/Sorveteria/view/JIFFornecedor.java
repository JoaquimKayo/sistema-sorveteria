
package Sorveteria.view;

import Sorveteria.data.FornecedorData;
import Sorveteria.model.Fornecedor;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class JIFFornecedor extends javax.swing.JInternalFrame {
    Fornecedor obj;
    FornecedorData DAO;
    ArrayList<Fornecedor>  lista;
    int acao = 0;
    public JIFFornecedor() {

        
        try {
            obj = new Fornecedor();
            DAO = new FornecedorData();
            lista = new ArrayList<>();
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,"Erro ao conectar: " + ex.getMessage());
        }
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jftCnpj = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jftTelefone = new javax.swing.JFormattedTextField();
        jtRazaoSocial = new javax.swing.JTextField();
        jbNovo = new javax.swing.JButton();
        jbSalvar = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        jbEditar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbDados = new javax.swing.JTable();
        jtPesquisa = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Cadastro de Fornecedores");

        jLabel1.setText("Cnpj:");

        try {
            jftCnpj.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.###.###/####-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jftCnpj.setEnabled(false);

        jLabel2.setText("Razão Social:");

        jLabel3.setText("Telefone:");

        try {
            jftTelefone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jftTelefone.setEnabled(false);

        jtRazaoSocial.setEnabled(false);

        jbNovo.setText("Novo");
        jbNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNovoActionPerformed(evt);
            }
        });

        jbSalvar.setText("Salvar");
        jbSalvar.setEnabled(false);
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        jbCancelar.setText("Cancelar");
        jbCancelar.setEnabled(false);
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        jbExcluir.setText("Excluir");
        jbExcluir.setEnabled(false);
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jbEditar.setText("Editar");
        jbEditar.setEnabled(false);
        jbEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditarActionPerformed(evt);
            }
        });

        jtbDados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CNPJ", "Razão Social", "Telefone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbDados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbDadosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtbDados);

        jtPesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtPesquisaKeyReleased(evt);
            }
        });

        jLabel4.setText("Pesquisa:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jtPesquisa))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(70, 70, 70)
                                    .addComponent(jbEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(55, 55, 55)
                                    .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jtRazaoSocial))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jftCnpj, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(30, 30, 30)
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jftTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jbNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(47, 47, 47)
                                    .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(42, 42, 42)
                                    .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jftCnpj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jftTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtRazaoSocial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNovoActionPerformed
        Sorveteria.data.extras.Formulario.limparCampos(this);
        Sorveteria.data.extras.Formulario.tratarCampos(this, true);
        jbNovo.setEnabled(false);
        jbSalvar.setEnabled(true);
        jbCancelar.setEnabled(true);
        acao = 1; //incluir (INSERT)
    }//GEN-LAST:event_jbNovoActionPerformed

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed
  
        try{
            //validar dados
            if (validarDados()) {
                //preencher objeto
                if (preencherObjeto()) {
                    if (acao == 1){
                        //incluir no banco
                        if(DAO.incluir(obj)){
                            //mostrar menssagem 
                            JOptionPane.showMessageDialog(rootPane, "Salvo com sucesso", "Salvar", JOptionPane.WARNING_MESSAGE);
                            //limpar a tela
                            jbCancelarActionPerformed(evt);
                        }else{
                            JOptionPane.showMessageDialog(this, "Erro ao salvar: ", "Salvar-Fornecedor", JOptionPane.ERROR_MESSAGE);
                        } 
                    }
                    if(acao == 2){
                        if(DAO.editar(obj)){
                            JOptionPane.showMessageDialog(rootPane, "Atualizado com sucesso", "Atualizar", JOptionPane.WARNING_MESSAGE);
                            jbCancelarActionPerformed(evt);
                        }else{
                            JOptionPane.showMessageDialog(this, "Erro ao Atualizar: ", "Atualizar-Fornecedor", JOptionPane.ERROR_MESSAGE);
                        } 
                    }
                }
            }

        } catch (Exception e){
            JOptionPane.showMessageDialog(this, "Erro ao salvar: " + e.getMessage(), "Salvar-Fornecedor", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbSalvarActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        Sorveteria.data.extras.Formulario.limparCampos(this);
        Sorveteria.data.extras.Formulario.tratarCampos(this, false);
        DefaultTableModel mp = (DefaultTableModel)jtbDados.getModel();
        
        jbNovo.setEnabled(true);
        jbSalvar.setEnabled(false);
        jbCancelar.setEnabled(false);
        jbEditar.setEnabled(false);
        jbExcluir.setEnabled(false);
        jtPesquisa.setText("");
        jtPesquisa.setEnabled(true);
        mp.setNumRows(0);//limpar a tabela
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jtPesquisaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtPesquisaKeyReleased
        try {
            int qtd = jtPesquisa.getText().length();
            
            DefaultTableModel mp = (DefaultTableModel)jtbDados.getModel();

            if (qtd < 3) {
                mp.setNumRows(0);//limpar a tabela
            }else{
                mp.setNumRows(0);
                lista = DAO.pesquisar(jtPesquisa.getText());
                for(Fornecedor t: lista){
                    ////String cnpj, String Razao_Social, String telefone
                    mp.addRow(new String[]{""+t.getCnpj(),t.getRazao_social(),t.getTelefone()});
                }
            }   
  
            
           
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao pesquisar: "+e.getMessage());
        }
    }//GEN-LAST:event_jtPesquisaKeyReleased

    private void jtbDadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbDadosMouseClicked
        Sorveteria.data.extras.Formulario.limparCampos(this);
        Sorveteria.data.extras.Formulario.tratarCampos(this, false);
        
        try {
            int linha = jtbDados.getSelectedRow();
            if(linha>-1){
            StringBuilder sb = new StringBuilder(jtbDados.getValueAt(jtbDados.getSelectedRow(), 2).toString());
        
            //deletar o prefixo "+55" : +55 ## ##### ####
            for (int i = 0; i < 3; i++) {
                sb.deleteCharAt(0);
            }

            //inserir o Parenteses "(": ## ##### ####
            //sb.insert(0, "(");


            jftCnpj.setText(jtbDados.getValueAt(jtbDados.getSelectedRow(), 0).toString());
            jtRazaoSocial.setText(jtbDados.getValueAt(jtbDados.getSelectedRow(), 1).toString());
            jftTelefone.setText(sb.toString());
            jbEditar.setEnabled(true);
            jbExcluir.setEnabled(true);
            jbCancelar.setEnabled(true);
            
            } else {
                jbEditar.setEnabled(false);
                jbExcluir.setEnabled(false);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao selecionar o registro: "+e.getMessage());
        }
    }//GEN-LAST:event_jtbDadosMouseClicked

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        int resposta = JOptionPane.showConfirmDialog(this ,"Você tem certeza que deseja Excluir o Fornecedor ("+jtRazaoSocial.getText()+")", "Exclusão",JOptionPane.YES_NO_OPTION);
        if (resposta == 0) {
            try {
                if(DAO.excluir(jftCnpj.getText())){
                    JOptionPane.showMessageDialog(this, "Excluído com sucesso");
                    jbCancelarActionPerformed(evt);
                    jtPesquisa.setEnabled(true);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erro ao excluir o registro: "+e.getMessage());
            }
        }else{  
            JOptionPane.showMessageDialog(this, "Fique tranquilo que o registro não será excluído!! ;)");
        } 
    }//GEN-LAST:event_jbExcluirActionPerformed

    private void jbEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditarActionPerformed
        Sorveteria.data.extras.Formulario.tratarCampos(this, true);
        acao = 2; //editar (UPDATE)
        jftCnpj.setEnabled(false);
        jbSalvar.setEnabled(true);
        jbCancelar.setEnabled(true);
        jbNovo.setEnabled(false);
        jbExcluir.setEnabled(false);
        jbEditar.setEnabled(false);
    }//GEN-LAST:event_jbEditarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbEditar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbNovo;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JFormattedTextField jftCnpj;
    private javax.swing.JFormattedTextField jftTelefone;
    private javax.swing.JTextField jtPesquisa;
    private javax.swing.JTextField jtRazaoSocial;
    private javax.swing.JTable jtbDados;
    // End of variables declaration//GEN-END:variables

    private boolean preencherObjeto() throws Exception{
        StringBuilder sb = new StringBuilder(jftTelefone.getText());
        
        //deletar o "(" : (##)####-####
        sb.deleteCharAt(0);
        
        //agr deletar o ")" : ##)####-####
        sb.deleteCharAt(2);
        
        //agr deletar o "-" : ######-####
        sb.deleteCharAt(6);
        
        //agr inserir o "+55" na position 0 : +55##########
        sb.insert(0, "+55");
        
        obj.setCnpj(jftCnpj.getText());
        obj.setRazao_social(jtRazaoSocial.getText());
        obj.setTelefone(sb.toString());
        return true;
    }
    
    private boolean validarDados() throws Exception{  
        if (jftCnpj.getText().equals("  .   .   /    -  ")) 
            throw new Exception ("CNPJ não informado");
        
        if (jftTelefone.getText().equals("(  )    -    ")) 
            throw new Exception ("Telefone não informado");
        
        if (jtRazaoSocial.getText().length() < 3 || jtRazaoSocial.getText().length() > 100) 
            throw new Exception ("A Razão Social deve ter entre 3 e 100 caractéres");
        
        //Retirar os caracteres da String e ficar só os numeros do cnpj
        StringBuilder sb = new StringBuilder(jftCnpj.getText());
        //##.###.###/####-##
        sb.deleteCharAt(2);
        //#####.###/####-##
        sb.deleteCharAt(5);
        //########/####-##
        sb.deleteCharAt(8);
        //############-##
        sb.deleteCharAt(12);

        //atribuir essa string sem os caracteres para uma String cnpj
        String cnpj = sb.toString();
        
        //chamar a função criada, e se retornar false gerar uma excessao de cnpj inválido.
        if(!isCNPJ(cnpj))
            throw new Exception ("CNPJ Inválido!!");
        
        
        return true;
    }
    
    public static boolean isCNPJ(String CNPJ) {
        // considera-se erro CNPJ's formados por uma sequencia de numeros iguais
        if (CNPJ.equals("00000000000000") || CNPJ.equals("11111111111111") ||
            CNPJ.equals("22222222222222") || CNPJ.equals("33333333333333") ||
            CNPJ.equals("44444444444444") || CNPJ.equals("55555555555555") ||
            CNPJ.equals("66666666666666") || CNPJ.equals("77777777777777") ||
            CNPJ.equals("88888888888888") || CNPJ.equals("99999999999999") ||
            (CNPJ.length() != 14))
           return(false);

        char dig13, dig14;
        int sm, i, r, num, peso;

        // "try" - protege o código para eventuais erros de conversao de tipo (int)
        try {
            // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 2;
            for (i=11; i>=0; i--) {
                // converte o i-ésimo caractere do CNPJ em um número:
                // por exemplo, transforma o caractere '0' no inteiro 0
                // (48 eh a posição de '0' na tabela ASCII)
                num = (int)(CNPJ.charAt(i) - 48);
                sm = sm + (num * peso);
                peso = peso + 1;
                if (peso == 10)
                   peso = 2;
            }

            r = sm % 11;
            if ((r == 0) || (r == 1))
               dig13 = '0';
            else dig13 = (char)((11-r) + 48);

            // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 2;

            for (i=12; i>=0; i--) {
              num = (int)(CNPJ.charAt(i)- 48);
              sm = sm + (num * peso);
              peso = peso + 1;
              if (peso == 10)
                 peso = 2;
            }

            r = sm % 11;
            if ((r == 0) || (r == 1))
               dig14 = '0';
            else dig14 = (char)((11-r) + 48);

            // Verifica se os dígitos calculados conferem com os dígitos informados.
            if ((dig13 == CNPJ.charAt(12)) && (dig14 == CNPJ.charAt(13)))
                return(true);
            else return(false);

        } catch (Exception erro) {
            System.out.println("Erro na validacao de CNPJ: "+erro);
            return(false);
        }
    }

}
